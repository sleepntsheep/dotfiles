--- surf.c
+++ surf.c
@@ -6,6 +6,7 @@
 #include <X11/X.h>
 #include <X11/Xatom.h>
 #include <gtk/gtk.h>
+#include <gtk/gtkx.h>
 #include <gdk/gdkx.h>
 #include <gdk/gdk.h>
 #include <gdk/gdkkeysyms.h>
@@ -100,7 +101,7 @@ typedef struct {
 static Display *dpy;
 static Atom atoms[AtomLast];
 static Client *clients = NULL;
-static GdkNativeWindow embed = 0;
+static Window embed = 0;
 static gboolean showxid = FALSE;
 static char winid[64];
 static gboolean usingproxy = 0;
@@ -627,9 +628,9 @@ getatom(Client *c, int a)
 	unsigned long ldummy;
 	unsigned char *p = NULL;
 
-	XGetWindowProperty(dpy, GDK_WINDOW_XID(GTK_WIDGET(c->win)->window),
-	                   atoms[a], 0L, BUFSIZ, False, XA_STRING,
-	                   &adummy, &idummy, &ldummy, &ldummy, &p);
+	XGetWindowProperty(dpy, GDK_WINDOW_XID(gtk_widget_get_window(GTK_WIDGET(c->win))),
+			atoms[a], 0L, BUFSIZ, False, XA_STRING,
+			&adummy, &idummy, &ldummy, &ldummy, &p);
 	if (p)
 		strncpy(buf, (char *)p, LENGTH(buf)-1);
 	else
@@ -873,6 +874,7 @@ newclient(void)
 	WebKitWebFrame *frame;
 	GdkGeometry hints = { 1, 1 };
 	GdkScreen *screen;
+	GdkWindow *window;
 	gdouble dpi;
 	char *ua;
 
@@ -902,6 +904,10 @@ newclient(void)
 		 */
 		gtk_window_set_role(GTK_WINDOW(c->win), "Surf");
 	}
+
+	gtk_widget_realize(GTK_WIDGET(c->win));
+	window = gtk_widget_get_window(GTK_WIDGET(c->win));
+
 	gtk_window_set_default_size(GTK_WINDOW(c->win), 800, 600);
 	g_signal_connect(G_OBJECT(c->win),
 	                 "destroy",
@@ -914,10 +920,10 @@ newclient(void)
 		addaccelgroup(c);
 
 	/* Pane */
-	c->pane = gtk_vpaned_new();
+	c->pane = gtk_paned_new(GTK_ORIENTATION_VERTICAL);
 
 	/* VBox */
-	c->vbox = gtk_vbox_new(FALSE, 0);
+	c->vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
 	gtk_paned_pack1(GTK_PANED(c->pane), c->vbox, TRUE, TRUE);
 
 	/* Webview */
@@ -999,8 +1005,8 @@ newclient(void)
 	gtk_widget_show(c->win);
 	gtk_window_set_geometry_hints(GTK_WINDOW(c->win), NULL, &hints,
 	                              GDK_HINT_MIN_SIZE);
-	gdk_window_set_events(GTK_WIDGET(c->win)->window, GDK_ALL_EVENTS_MASK);
-	gdk_window_add_filter(GTK_WIDGET(c->win)->window, processx, c);
+	gdk_window_set_events(window, GDK_ALL_EVENTS_MASK);
+	gdk_window_add_filter(window, processx, c);
 	webkit_web_view_set_full_content_zoom(c->view, TRUE);
 
 	runscript(frame);
@@ -1034,7 +1040,7 @@ newclient(void)
 	 * It is equivalent to firefox's "layout.css.devPixelsPerPx" setting.
 	 */
 	if (zoomto96dpi) {
-		screen = gdk_window_get_screen(GTK_WIDGET(c->win)->window);
+		screen = gdk_window_get_screen(window);
 		dpi = gdk_screen_get_resolution(screen);
 		if (dpi != -1) {
 			g_object_set(G_OBJECT(settings),
@@ -1073,7 +1079,7 @@ newclient(void)
 	if (showxid) {
 		gdk_display_sync(gtk_widget_get_display(c->win));
 		printf("%u\n",
-		       (guint)GDK_WINDOW_XID(GTK_WIDGET(c->win)->window));
+		       (guint)GDK_WINDOW_XID(window));
 		fflush(NULL);
 		if (fclose(stdout) != 0)
 			die("Error closing stdout");
@@ -1281,7 +1287,7 @@ void
 setatom(Client *c, int a, const char *v)
 {
 	XSync(dpy, False);
-	XChangeProperty(dpy, GDK_WINDOW_XID(GTK_WIDGET(c->win)->window),
+	XChangeProperty(dpy, GDK_WINDOW_XID(gtk_widget_get_window(GTK_WIDGET(c->win))),
 	                atoms[a], XA_STRING, 8, PropModeReplace,
 	                (unsigned char *)v, strlen(v) + 1);
 }
@@ -1302,7 +1308,7 @@ setup(void)
 		die("Can't install SIGHUP handler");
 	gtk_init(NULL, NULL);
 
-	dpy = GDK_DISPLAY();
+	dpy = GDK_DISPLAY_XDISPLAY(gdk_display_get_default());
 
 	/* atoms */
 	atoms[AtomFind] = XInternAtom(dpy, "_SURF_FIND", False);
@@ -1634,7 +1640,7 @@ void
 updatewinid(Client *c)
 {
 	snprintf(winid, LENGTH(winid), "%u",
-	         (int)GDK_WINDOW_XID(GTK_WIDGET(c->win)->window));
+	         (int)GDK_WINDOW_XID(gtk_widget_get_window(GTK_WIDGET(c->win))));
 }
 
 void
